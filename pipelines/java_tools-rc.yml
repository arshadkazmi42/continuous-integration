---
steps:
  - input: "Release information"
    fields:
      - text: "Version (e.g. 12.1)"
        key: "version"
        required: true      
      - text: "RC (e.g. 1, 2)"
        key: "rc"
        required: true
        default: "1"
        hint: "For final releases, please enter the RC to create artifacts from."
      - select: "Final release?"
        key: "final"
        required: true
        default: "false"
        options:
          - label: "True"
            value: "true"
          - label: "False"
            value: "false"
      - text: "Commit hash"
        key: "commit"
        required: false
        hint: "For final releases only. Leave blank for RCs."            
 
  - wait 
      
  - label: "Set up"
    agents:
      - "queue=default"
    command: |
      echo "+++ Checking out Git branch"    
      git fetch origin master
      git checkout master
      
      echo "+++ Printing latest commit hash"
      echo "commit_hash = \"\${BUILDKITE_COMMIT}\""
      
  - wait

  - label: "Trigger java_tools binaries pipeline"
    if: build.message !~ /final/i
    trigger: "java-tools-binaries-java"
    build:
      message: ${BUILDKITE_MESSAGE}
      commit: ${BUILDKITE_COMMIT}
      branch: master

  - block: "Create release"

  - label: "Create release"
    agents:
      - "queue=default"
    command: |
      echo "+++ Identify required variables"
      version=$(buildkite-agent meta-data get "version")
      rc=$(buildkite-agent meta-data get "rc")
      final=$(buildkite-agent meta-data get "final")
      commit_hash=$(buildkite-agent meta-data get "commit")

      if [[ \"\$commit_hash\" == "" ]]; then
        commit_hash=${BUILDKITE_COMMIT}
      fi
      echo "commit_hash = \"\$commit_hash\""
      echo "version = \"\$version\""      
      echo "rc = \"\$rc\""
      echo "final = \"\$final\""

      echo "+++ Run create_java_tools_release.sh script"
      release_info=$(src/create_java_tools_release.sh --commit_hash ${commit_hash} --java_tools_version ${version} --rc ${rc} --release ${final})
      echo "release_info = \"\$release_info\""
      buildkite-agent meta-data set "release_info" "\$release_info"

      # Note: Buildkite doesn't allow passing of meta-data directly to the triggered pipeline; we need to manually copy over the script output for now

  - wait
  
  - label: "Update rules_java"
    trigger: "rules-java-updates"
    build:
      message: ${BUILDKITE_MESSAGE}
      
  - wait
  
  - label: "Calculate integrity"
    trigger: "bcr-integrity"
    build:
      message: ${BUILDKITE_MESSAGE}

  - wait
  
  - label: "Update Bazel"
    trigger: "bazel-java_tools-updates"
    build:
      message: ${BUILDKITE_MESSAGE}

  
  
